#!/bin/bash
PATH="/usr/bin:/bin"
CONFIG_FILE="@sysconfdir@/acme.conf"
COMMON_FILE="@pkgdatadir@/libcommon.sh"
ACME_TINY_PY="@pkgdatadir@/acme_tiny.py"

source "${COMMON_FILE}" || {
	echo "Failed to include shared function file" >&2
	exit 1
}

[[ ${UID} -eq 0 ]] || {
	pr_error "Must be root to run this application"
	exit 1
}

[[ -f "${ACME_TINY_PY}" ]] || {
	pr_error "Could not find 'acme_tiny.py' ACME client in '@pkgdatadir@'"
	exit 1
}

#
# Handle command-line arguments
#
ARGS="$(getopt -n '' -o 'c:h' -l 'config:,help,pre-hook:,renew-hook:,post-hook:' -- "$@")"
[[ $? -eq 0 ]] || {
	pr_error "Failed to parse arguments" >&2
	exit 1
}

function print_usage() {
	cat ->&2 <<-EOF
		Usage:
		        ${0} [options]
		Options:
		        -c|--config	Alternative config file path (default: ${CONFIG_FILE})

		        --pre-hook=PATH

		                        Command/script run before renewing certificates.

		        --renew-hook=PATH

		                        Command/script invoked after renewing a certificate.
		                        Environment variables:
		                          ISSUER_FILENAME - Full path to the issuer certificate
		                          CERT_FILENAME   - Full path of the certificate file
		                          CERT_HOSTNAME   - The "primary" name (subject CommonName) of the certificate
		                          CERT_DOMAINS    - Space-separated list of all subject-/AltNames

		        --post-hook=PATH

		                        Command/script run after all renewals have been completed.
		                        Environment variables:
		                          CERTS_RENEWED   - Space-separated list of renewed certificates
		                          DOMAINS_RENEWED - Space-separated list of renewed subjectAltNames

	EOF
	exit 1
}

RENEW_HOOK='' POST_HOOK=''
eval set -- "${ARGS}"
while true ; do
	case "${1}" in
	-c|--config)
		shift; CONFIG_FILE="${1}"; shift
		;;
	-h|--help)
		print_usage; exit 1
		;;
	--renew-hook)
		shift; RENEW_HOOK="${1}"; shift
		[[ -x "${RENEW_HOOK}" || -d "${RENEW_HOOK}" ]] || {
			pr_error "Renew hook script or directory '${RENEW_HOOK}' is invalid"
			exit 1
		}
		;;
	--pre-hook)
		shift; PRE_HOOK="${1}"; shift
		[[ -x "${PRE_HOOK}" || -d "${PRE_HOOK}" ]] || {
			pr_error "Pre hook script or directory '${PRE_HOOK}' is invalid"
			exit 1
		}
		;;
	--post-hook)
		shift; POST_HOOK="${1}"; shift
		[[ -x "${POST_HOOK}" || -d "${POST_HOOK}" ]] || {
			pr_error "Post hook script or directory '${POST_HOOK}' is invalid"
			exit 1
		}
		;;
	--)	shift; break;
		;;
	esac
done

[[ -f "${CONFIG_FILE}" ]] || {
	pr_error "Configuration file '${CONFIG_FILE}' not found"
	exit 1
}

source "${CONFIG_FILE}" || {
	pr_error "Configuration file '${CONFIG_FILE}' not readable"
	exit 1
}

PREREQS=( "${OPENSSL}" "${WGET}" "${SU}" )
for x in ${PREREQS[@]}
do
	[[ -x "${x}" ]] || {
		pr_error "Could not find required pre-requisite '${x}'"
		exit 1
	}
done

[[ -f "${ACCOUNT_KEY}" ]] || {
	pr_error "Account key missing"
	exit 1
}

[[ -d "${CERT_DIR}" ]] || {
	pr_error "Certificate dir not found"
	exit 1
}

[[ -d "${CHALLENGE_DIR}" ]] || {
	pr_error "ACME challenge dir not found"
	exit 1
}

#
# Search for letsencrypt signed certificates in CERT_DIR
#
FILES="$(find "${CERT_DIR}" -type f \( -name "*.crt" -or -name "*.pem" \))"
[[ -n "${FILES}" ]] || {
	pr_error "No certificate files found, nothing to do..."
	exit 1
}

UPDATED=0 FAILED=0 SKIPPED=0
CERTIFICATES=()
while read fn
do
	CERT_NAME="$(basename "${fn}")"

	acme_check_domain_cert "${fn}" || {
		(( SKIPPED++ ))
		continue
	}

	pr_info "Marking '${CERT_NAME}' for update..."
	CERTIFICATES+=( "${CERT_NAME}" )

done <<<"${FILES}"

[[ ${#CERTIFICATES[@]} -gt 0 ]] || {
	pr_info "No expiring letsencrypt certificate files found, nothing to do..."
	exit 1
}

# Run pre-hook scripts
if [[ -n "${PRE_HOOK}" ]]
then
	HOOK_SCRIPTS=''
	if   [[ -d "${PRE_HOOK}" ]]; then
		HOOK_SCRIPTS="$(find "${PRE_HOOK}" -type f -executable -name "*.sh" | sort)"
	elif [[ -x "${PRE_HOOK}" ]]; then
		HOOK_SCRIPTS="${PRE_HOOK}"
	fi

	while read fn; do
		[[ -x "${fn}" ]] || continue
		(env - "${fn}") || {
			pr_error "Failed to execute pre hook script '${fn}'"
			exit 1
		}
	done <<<"${HOOK_SCRIPTS}"
fi

# Prepare renew-hook
HOOK_SCRIPTS=''
if [[ -n "${RENEW_HOOK}" ]]
then
	if   [[ -d "${RENEW_HOOK}" ]]; then
		HOOK_SCRIPTS="$(find "${RENEW_HOOK}" -type f -executable -name "*.sh" | sort)"
	elif [[ -x "${RENEW_HOOK}" ]]; then
		HOOK_SCRIPTS="${RENEW_HOOK}"
	fi
fi

UPDATED=0 SKIPPED=0 FAILED=0
RENEWED_DOMAINS=()
RENEWED_CERTS=()
for fn in ${CERTIFICATES[@]}
do
	CERT_NAME="${fn}"
	CERT_BASE="${CERT_NAME%.*}"
	[[ -f "${CERT_DIR}/${CERT_NAME}" ]] || {
		pr_error "Domain certificate '${CERT_NAME}' not found"
		(( FAILED++ ))
		continue
	}

	CERT_DOMAINS="$(acme_get_csr_names "${CERT_DIR}/${CERT_BASE}.csr")"
	[[ -n "${CERT_DOMAINS}" ]] || {
		(( FAILED++ ))
		continue
	}

	# Primary (non-alias) cert domain
	CERT_HOSTNAME="$(cut -d' ' -f1 <<<"${CERT_DOMAINS}")"
	[[ -n "${CERT_HOSTNAME}" ]] || {
		(( FAILED++ ))
		continue
	}

	acme_handle_domain_cert "${CERT_DIR}/${CERT_BASE}.csr" "${CERT_DIR}/${CERT_BASE}.crt" || {
		(( FAILED++ ))
		continue
	}

	acme_handle_issuer_cert "${CERT_DIR}/${CERT_BASE}.crt" "${CERT_DIR}/${CERT_BASE}.ca-bundle" || {
		(( FAILED++ ))
		continue
	}

	RENEWED_DOMAINS+=( ${CERT_DOMAINS} )
	RENEWED_CERTS+=( "${CERT_DIR}/${CERT_BASE}.crt" )

	# Run renew-hook scripts
	if [[ -n "${RENEW_HOOK}" ]]
	then
		while read fn; do
			[[ -x "${fn}" ]] || continue
			(env - CERT_FILENAME="${CERT_DIR}/${CERT_BASE}.crt" CERT_HOSTNAME="${CERT_HOSTNAME}" \
				CERT_DOMAINS="${CERT_DOMAINS}" ISSUER_FILENAME="${CERT_DIR}/${CERT_BASE}.ca-bundle" "${fn}") || {
				pr_error "Failed to execute renewal hook script '${fn}'"
				exit 1
			}
		done <<<"${HOOK_SCRIPTS}"
	fi

	(( UPDATED++ ))
done

pr_info "Found: ${#CERTIFICATES[@]}, Updated: ${UPDATED}, Skipped: ${SKIPPED}, Failed: ${FAILED}"

# Run post-hook scripts
if [[ -n "${POST_HOOK}" && "${UPDATED}" -gt 0 ]]
then
	HOOK_SCRIPTS=''
	if   [[ -d "${POST_HOOK}" ]]; then
		HOOK_SCRIPTS="$(find "${POST_HOOK}" -type f -executable -name "*.sh" | sort)"
	elif [[ -x "${POST_HOOK}" ]]; then
		HOOK_SCRIPTS="${POST_HOOK}"
	fi

	while read fn; do
		[[ -x "${fn}" ]] || continue
		(env - CERTS_RENEWED="${RENEWED_CERTS[@]}" DOMAINS_RENEWED="${RENEWED_DOMAINS[@]}" "${fn}") || {
			pr_error "Failed to execute post hook script '${fn}'"
			exit 1
		}
	done <<<"${HOOK_SCRIPTS}"
fi

# Set proper exit code
[[ ${FAILED} -eq 0 ]]
exit $?
