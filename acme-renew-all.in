#!/bin/bash
PATH="/usr/bin:/bin"
CONFIG_FILE="@sysconfdir@/acme.conf"
[[ -f "${CONFIG_FILE}" ]] || {
	echo "Configuration file '${CONFIG_FILE}' not found" >&2
	exit 1
}

source "${CONFIG_FILE}" || {
	echo "Configuration file '${CONFIG_FILE}' not readable" >&2
	exit 1
}

[[ ${UID} -eq $(id -u "${ACME_USER}") ]] || {
	echo "This script needs to run as '${ACME_USER}'!" >&2
	exit 1
}

[[ -f "@pkgdatadir@/acme_tiny.py" ]] || {
	echo "Could not find 'acme_tiny.py' ACME client in '@pkgdatadir@'" >&2
	exit 1
}

PREREQS=( "${OPENSSL}" "${WGET}" )
for x in ${PREREQS[@]}
do
	[[ -x "${x}" ]] || {
		echo "Could not find required pre-requisite '${x}'" >&2
		exit 1
	}
done

[[ -f "${ACCOUNT_KEY}" ]] || {
	echo "Account key missing" >&2
	exit 1
}

[[ -d "${CERT_DIR}" ]] || {
	echo "Certificate dir not found" >&2
	exit 1
}

[[ -d "${CHALLENGE_DIR}" ]] || {
	echo "ACME challenge dir not found" >&2
	exit 1
}

#
# Search for letsencrypt signed certificates in CERT_DIR
#
FILES="$(find "${CERT_DIR}" -type f \( -name "*.crt" -or -name "*.pem" \))"
[[ -n "${FILES}" ]] || {
	echo "No certificate files found, nothing to do..." >&2
	exit 1
}

UPDATED=0 FAILED=0 SKIPPED=0
CERTIFICATES=()
while read fn
do
	CERT_NAME="$(basename "${fn}")"
	ISSUER="$(${OPENSSL} x509 -in "${fn}" -issuer -noout 2>/dev/null)"
	[[ $? -eq 0 ]] || {
		#echo "Failed to load certificate '${CERT_NAME}', skipping" >&2
		continue
	}
	grep -q "/C=US/O=Let's Encrypt/" <<<"${ISSUER}" || {
		#echo "Certificate '${CERT_NAME}' not signed by letsencrypt CA, skipping" >&2
		continue
	}

	${OPENSSL} x509 -in "${CERT_DIR}/${CERT_NAME}" \
		-checkend $(( MIN_EXPIRE_DAYS * 86400 )) \
		>/dev/null
	[[ $? -gt 0 ]] || {
		echo "Domain certificate '${CERT_NAME}' does not expire within the next ${MIN_EXPIRE_DAYS} days, skipping" >&2
		(( SKIPPED++ ))
		continue
	}

	echo "Marking '${CERT_NAME}' for update..." >&2
	CERTIFICATES+=( "${CERT_NAME}" )

done <<<"${FILES}"

[[ ${#CERTIFICATES[@]} -gt 0 ]] || {
	echo "No expiring letsencrypt certificate files found, nothing to do..." >&2
	exit 1
}

while read fn
do
	CERT_NAME="${fn}"
	[[ -f "${CERT_DIR}/${CERT_NAME}" ]] || {
		echo "Domain certificate '${CERT_NAME}' not found" >&2
		(( FAILED++ ))
		continue
	}

	CERT_REQUEST="${CERT_NAME/%.crt/.csr}"
	[[ -f "${CERT_DIR}/${CERT_REQUEST}" ]] || {
		echo "Domain certificate sign request '${CERT_REQUEST}' not found" >&2
		(( FAILED++ ))
		continue
	}

	echo "Renewing '${CERT_NAME}' certificate..." >&2
	CERT_RESPONSE="$(${PYTHON} "@pkgdatadir@/acme_tiny.py" \
		--csr "${CERT_DIR}/${CERT_REQUEST}" \
		--account-key "${ACCOUNT_KEY}" \
		--acme-dir "${CHALLENGE_DIR}")"

	[[ $? -eq 0 ]] || {
		echo "Failed to renew certificate (see errors above)" >&2
		(( FAILED++ ))
		continue
	}

	[[ -n "${CERT_RESPONSE}" ]] || {
		echo "Failed to renew certificate (empty output)" >&2
		(( FAILED++ ))
		continue
	}

	cat ->"${CERT_DIR}/${CERT_NAME}" <<<"${CERT_RESPONSE}" || {
		echo "Failed to renew certificate (update failed)" >&2
		(( FAILED++ ))
		continue
	}

	# Get old and new issuer name for the ca-bundle fetching
	ISSUER_CUR="$(${OPENSSL} x509 -noout -subject -in "${CERT_DIR}/${CERT_NAME}.ca-bundle" | grep -Eo '/.+')"
	ISSUER_NEW="$(${OPENSSL} x509 -noout -subject -in "${CERT_DIR}/${CERT_NAME}.crt"       | grep -Eo '/.+')"

	# Check if issuer cert expires
	${OPENSSL} x509 -in "${CERT_DIR}/${CERT_NAME}.ca-bundle" \
		-checkend $(( MIN_EXPIRE_DAYS * 86400 )) \
		>/dev/null
	if [[ $? -gt 0 ]] || [[ "${ISSUER_CUR}" != "${ISSUER_NEW}" ]]
	then
		echo "Renewing issuer chain certificate..." >&2
		ISSUER_RESPONSE="$(${WGET} "${ACME_ISSUER_CERT}" -O - 2>/dev/null)"
		[[ -n "${ISSUER_RESPONSE}" ]] || {
			echo "Failed to renew certificate chain certificate from '${ISSUER_URL}'" >&2
			(( FAILED++ ))
			continue
		}

		cat ->"${CERT_DIR}/${CERT_NAME}.ca-bundle" <<<"${ISSUER_RESPONSE}" || {
			echo "Failed to renew certificate chain certificate (update failed)" >&2
			(( FAILED++ ))
			continue
		}
	fi

	(( UPDATED++ ))
done <<<"${CERTIFICATES[@]}"

echo "Found: ${#CERTIFICATES[@]}, Updated: ${UPDATED}, Skipped: ${SKIPPED}, Failed: ${FAILED}" >&2

# Exitcode 0 indicates a least one cert has been updated, reload http server
[[ ${UPDATED} -gt 0 ]]; exit $?
