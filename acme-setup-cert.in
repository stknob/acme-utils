#!/bin/bash
PATH="/usr/bin:/bin"
DOMAIN_REGEX='^(\*\.)?([[:alpha:]][[:alnum:]-]*[[:alnum:]]+\.)+([[:alpha:]]+)$'
NAME_REGEX='^([[:alpha:]][[:alnum:]-]*[[:alnum:]]+\.)+([[:alpha:]]+)$'
CONFIG_FILE="@sysconfdir@/acme.conf"

[[ ${UID} -eq 0 ]] || {
	echo "Must be root to run this application" >&2
	exit 1
}

umask 077 || {
	echo "Failed to lower umask setting" >&2
	exit 1
}

shopt -s nocasematch || {
	echo "Failed to enable nocasematch shell option" >&2
	exit 1
}

# Set some color constants
declare -r CGREEN='\x1b[32m' CWHITE='\x1b[1;37m' CRED='\x1b[31m' CRESET='\x1b[0m' CBLINK='\x1b[5m' CYELLOW='\x1b[1;33m'
declare -r CBLUE='\x1b[34m' CORANGE='\x1b[33m' CBROWN='\x1b[2;33m'

#
# Handle command-line arguments
#

ARGS=$(getopt -n '' -o 'c:f:n:h' -l 'config:,file:,name:,replace-csr,replace-all,help,key-type:,key-bits:' -- "$@")
[[ $? -eq 0 ]] || {
	echo "Failed to parse arguments" >&2
	exit 1
}

function print_usage() {
	cat ->&2 <<-EOF
		Usage:
		        ${0} [options] [[--] <NAME1> [... <NAMEN>]]
		Options:
		        -f|--file	File with list of DNS names
		        -n|--name	Name prefix of generated files (default: first DNS name in list)
		        -c|--config	Alternative config file path (default: ${CONFIG_FILE})
		        --replace-all   Overwrite existing key files (domain and backup key), csr and certificate
		        --replace-csr	Overwrite existing sign request file

			--key-type	Key type, one of: 'rsa', 'prime256v1', 'secp384r1'
			--key-bits	RSA only: Key size in bits
	EOF
	exit 1
}

eval set -- "${ARGS}"
REGEN_ALL=0 REGEN_CSR=0
NAMES_FILE="" CERT_NAME=""
NAMES_LIST=()
while true ; do
	case "${1}" in
	-c|--config)
		shift; CONFIG_FILE="${1}"; shift
		;;
	-f|--file)
		shift; NAMES_FILE="${1}"; shift
		;;
	-n|--name)
		shift; CERT_NAME="${1}"; shift
		;;
	--replace-csr)
		shift; REGEN_CSR=1		# Overwrite existing csr
		;;
	--replace-all)
		shift; REGEN_ALL=1		# Overwrite existing keys, csr and cert
		;;
	--key-type)
		shift; OPT_KEYTYPE="${1}"; shift;
		;;
	--key-bits)
		shift; OPT_KEYBITS="${1}"; shift;
		;;
	-h|--help)
		print_usage; exit 1
		;;
	--)	shift; break;
		;;
	esac
done

[[ -f "${CONFIG_FILE}" ]] || {
	echo "Configuration file '${CONFIG_FILE}' not found" >&2
	exit 1
}

source "${CONFIG_FILE}" || {
	echo "Configuration file '${CONFIG_FILE}' not readable" >&2
	exit 1
}

KEYTYPE="${OPT_KEYTYPE:-${KEYTYPE}}"
KEYBITS="${OPT_KEYBITS:-${KEYBITS}}"

PREREQS=( "${DIG}" "${OPENSSL}" "${WGET}" "${PWGEN}" )
for x in ${PREREQS[@]}
do
	[[ -x "${x}" ]] || {
		echo "Could not find required pre-requisite '${x}'" >&2
		exit 1
	}
done

[[ -f "${ACCOUNT_KEY}" ]] || {
	echo "Account key missing" >&2
	exit 1
}

[[ -d "${CERT_DIR}" ]] || {
	echo "Certificate dir not found" >&2
	exit 1
}

[[ -d "${CHALLENGE_DIR}" ]] || {
	echo "ACME challenge dir not found" >&2
	exit 1
}



#
# Domain name list file handling (-f|--file <name>)
#
if [[ -n "${NAMES_FILE}" ]]
then
	[[ -f "${NAMES_FILE}" ]] || {
		echo "Domain list file '${NAMES_FILE}' not found" >&2
		exit 1
	}

	TMP="$(cat "${NAMES_FILE}" 2>/dev/null)"
	[[ -n "${TMP}" ]] || {
		echo "Domain list file '${NAMES_FILE}' is empty" >&2
		exit 1
	}

	LINE_NR=0
	while read LINE; do
		(( LINE_NR++ ))
		# skip comment lines
		[[ "${LINE}" =~ ^# ]] && continue
		[[ "${LINE}" =~ ${DOMAIN_REGEX} ]] || {
			echo "Domain file '${NAMES_FILE}' contains invalid entry on line ${LINE_NR}: ${LINE}" >&2
			exit 1
		}
		# Verified, add to list of names
		NAMES_LIST+=( "${LINE}" )
	done <<<"${TMP}"
fi

#
# Command-line name list handling
#
while [[ $# -gt 0 ]]; do

	[[ "${1}" =~ ${DOMAIN_REGEX} ]] || {
		echo "Invalid domain name passed on command-line: ${1}" >&2
		exit 1
	}

	# Verified, add to list of names
	NAMES_LIST+=( "${1}" )
	shift
done

[[ ${#NAMES_LIST[*]} -gt 0 ]] || {
	echo "No domain names given" >&2
	exit 1
}

#
# Certificate filename
#
if [[ -z "${CERT_NAME}" ]]
then
	CERT_NAME="${NAMES_LIST[0]}"
	CERT_NAME="${CERT_NAME/#\*./wildcard.}"
	echo "No certificate name given, using '${CERT_NAME}'" >&2
else
	echo "Using certificate name '${CERT_NAME}'" >&2
fi
[[ "${CERT_NAME}" =~ ${NAME_REGEX} ]] || {
	echo "Certificate name should be a valid DNS name" >&2
	exit 1
}

#
# Check for existing files
#
[ -f "${CERT_DIR}/${CERT_NAME}.crt" -a ${REGEN_CSR} -eq 0 -a ${REGEN_ALL} -eq 0 ] && {
	echo "Certificate file found, not replacing existing file!" >&2
	exit 1
}
[ -f "${CERT_DIR}/${CERT_NAME}.csr" -a ${REGEN_CSR} -eq 0 -a ${REGEN_ALL} -eq 0 ] && {
	echo "Certificate sign request found, not replacing existing file!" >&2
	exit 1
}

# Backup key name
BACKUP_NAME="hpkp-backup-${CERT_NAME}"

# Deduplicate names and set primary
PRIMARY="${NAMES_LIST[0]}"
SUBJECTS=()
if [[ ${#NAMES_LIST[@]} -gt 1 ]]
then
	# Remove duplicate names from list
	TMP="$(tr ' ' '\n' <<<"${NAMES_LIST[*]}" | sort -u)"
	while read fn; do
		SUBJECTS+=( "DNS:${fn}" )
	done <<<"${TMP}"
else
	# Single entry, no deduplication needed
	SUBJECTS+=( "DNS:${PRIMARY}" )
fi

#
# Create temporary file and register cleanup func
#
TMPFILE="$(mktemp)"
[[ $? -eq 0 ]] || {
	echo "Failed to generate sign request" >&2
	exit 1
}

CLEANUP_FILES=( "${TMPFILE}" )

function cleanup() {
	#echo "Cleaning up files..." >&2
	for fn in ${CLEANUP_FILES[@]}; do
		[[ -f "${fn}" ]] || continue;
		rm -f "${fn}"
	done <<<"${CLEANUP_FILES[@]}"
}

trap cleanup EXIT INT KILL


#
# Check hostname setup
#
CHECKNAME="$(head -c 16 /dev/urandom | sha1sum - | cut -d' '  -f1)"
[[ -n "${CHECKNAME}" ]] || {
	echo "Failed to generate checkfile in '${CHALLENGE_DIR}', aborting" >&2
	exit 1
}

SIGNATURE="$(cat /proc/sys/kernel/random/uuid)"
[[ -n "${SIGNATURE}" ]] || {
	echo "Failed to update '${CHECKFILE}', aborting" >&2
	exit 1
}

CHECKFILE="${CHALLENGE_DIR}/${CHECKNAME}"
echo "${SIGNATURE}" >"${CHECKFILE}" || {
	echo "Failed to update '${CHECKFILE}', aborting" >&2
	exit 1
}

CLEANUP_FILES+=( "${CHECKFILE}" )

chmod 644 "${CHECKFILE}" || {
	echo "Failed to update '${CHECKFILE}' permissions, aborting" >&2
	exit 1
}

CHECKED=0 FAILED=0 TOTAL=${#SUBJECTS[@]}
HOSTNAMES="$(tr ' ' '\n' <<<"${SUBJECTS[@]}")"
echo "Checking ${TOTAL} name(s) for reachability..." >&2
while read fn
do
	HOSTNAME="${fn/#DNS:/}"
	HOSTNAME="${HOSTNAME/#\*./www.}"	# Use www. for wildcard certificates

	(( CHECKED++ ))

	echo -e "${CWHITE}[${CHECKED}/${TOTAL}]${CRESET} Checking DNS entries of ${HOSTNAME}..." >&2
	IPADDR4="$(${DIG} +short -t A    "${HOSTNAME}" 2>/dev/null)"
	IPADDR6="$(${DIG} +short -t AAAA "${HOSTNAME}" 2>/dev/null)"
	[ -n "${IPADDR4}" -o -n "${IPADDR6}" ] || {
		echo -e "\t${CRED}ERROR${CRESET}: Could not verify ${HOSTNAME} (does not resolve), please check your server setup!\n" >&2
		(( FAILED++ ))
		continue
	}

	echo -e "${CWHITE}[${CHECKED}/${TOTAL}]${CRESET} Checking for http://${HOSTNAME}/.well-known/acme-challenge/${CHECKNAME}..." >&2
	VALUE="$(${WGET} --quiet "http://${HOSTNAME}/.well-known/acme-challenge/${CHECKNAME}" -O -)" || {
		echo -e "\t${CRED}ERROR${CRESET}: Could not verify ${HOSTNAME} (not found or other error), please check your server setup!\n" >&2
		(( FAILED++ ))
		continue
	}
	[[ "${VALUE}" == "${SIGNATURE}" ]] || {
		echo -e "\t${CRED}ERROR${CRESET}: Could not verify ${HOSTNAME} (signature mismatch), please check your server setup!\n" >&2
		(( FAILED++ ))
		continue
	}

	echo -e "\t${CGREEN}OK${CRESET}: ${HOSTNAME} successfully verified\n" >&2

done <<<"${HOSTNAMES}"

[[ ${FAILED} -eq 0 ]] || {
	echo "Some of the certificate subject names could not be verified, aborting!" >&2
	exit 1
}

#
# Convert hostnames to alternative subject list
# and create temporary openssl config
#
SIGNOPTS=""
SAN="$(echo -n "${SUBJECTS[@]}" | tr ' ' ',')"
[[ -n "${SAN}" ]] || {
	echo "Failed to generate subjectAltNames list" >&2
	exit 1
}
cat /etc/ssl/openssl.cnf >"${TMPFILE}" || {
	echo "Failed to generate temporary openssl config" >&2
	exit 1
}
SIGNOPTS="-extensions SAN"
printf '[SAN]\nsubjectAltName=%s\n' "${SAN}" >>"${TMPFILE}" || {
	echo "Failed to generate temporary openssl config" >&2
	exit 1
}

#
# Create the domain key and its sha256 pin file
#
REGEN_DOMAIN_KEY=0
if [[ -f "${CERT_DIR}/${CERT_NAME}.key" ]]
then
	if [[ ${REGEN_ALL} -eq 0 ]]; then
		echo "Keeping existing domain key" >&2
		REGEN_DOMAIN_KEY=0
	else
		echo "Replacing domain key" >&2
		REGEN_DOMAIN_KEY=1
	fi
else
	#echo "No existing domain key found, generating a new one" >&2
	REGEN_DOMAIN_KEY=1
fi

if [[ ${REGEN_DOMAIN_KEY} -eq 1 ]]
then
	echo "Generating new domain key..." >&2
	case "${KEYTYPE:-RSA}" in
	rsa|RSA)
		${OPENSSL} genrsa -out "${CERT_DIR}/${CERT_NAME}.key" ${KEYBITS} || {
			echo "Failed to generate RSA domain key" >&2
			exit 1
		}
		;;
	secp384r1|prime256v1)
		${OPENSSL} ecparam -genkey -name ${KEYTYPE} -out "${CERT_DIR}/${CERT_NAME}.key" || {
			echo "Failed to generate ECDSA domain key" >&2
			exit 1
		}
		;;
	*)
		echo "Invalid or unknown key type: '${KEYTYPE}', use one of: 'rsa','prime256v1','secp384r1'" >&2
		exit 1
		;;
	esac

	chmod 400 "${CERT_DIR}/${CERT_NAME}.key" || {
		echo "Failed to set domain key permissions" >&2
		exit 1
	}

	echo "Generating new sha256 pin file for domain key..." >&2
	${OPENSSL} pkey -in "${CERT_DIR}/${CERT_NAME}.key" -outform der -pubout |\
		${OPENSSL} dgst -sha256 -binary |\
		base64 > "${CERT_DIR}/${CERT_NAME}.key.pin-sha256" \
	|| {
		echo "Failed to generate domain key pin file" >&2
		exit 1
	}

	chmod 644 "${CERT_DIR}/${CERT_NAME}.key.pin-sha256" || {
		echo "Failed to set domain key pin file permissions" >&2
		exit 1
	}
fi


REGEN_DOMAIN_CSR=0
if [[ -f "${CERT_DIR}/${CERT_NAME}.csr" ]]
then
	if [[ ${REGEN_DOMAIN_KEY} -eq 1 ]]; then
		echo "Domain keys have been replaced, need to regenerate sign request" >&2
		REGEN_DOMAIN_CSR=1
	elif [[ ${REGEN_CSR} -eq 1 ]]; then
		echo "Replacing sign request" >&2
		REGEN_DOMAIN_CSR=1
	else
		echo "Keeping existing sign request" >&2
		REGEN_DOMAIN_CSR=0
	fi
else
	#echo "No existing sign request found, generating a new one" >&2
	REGEN_DOMAIN_CSR=1
fi

if [[ ${REGEN_DOMAIN_CSR} -eq 1 ]]
then
	#
	# Generate a sign request using the temporary configuration file
	# and (optional) our list of alternative subject names
	#
	echo "Generating new sign request..."
	${OPENSSL} req -new -sha256 \
		-key  "${CERT_DIR}/${CERT_NAME}.key" \
		-out  "${CERT_DIR}/${CERT_NAME}.csr" \
		-subj "/CN=${PRIMARY}" \
		-reqexts SAN \
		-config "${TMPFILE}" \
		>/dev/null

	[[ $? -eq 0 ]] || {
		echo "Failed to generate sign request" >&2
		exit 1
	}

	#
	# Use ACLs to give letsencrypt user account access to certificate files
	#
	${SETFACL} -m "user:${ACME_USER}:r" "${CERT_DIR}/${CERT_NAME}.csr" || {
		echo "Failed to give ${ACME_USER} read permission on sign request" >&2
		exit 1
	}
fi

#
# Generate a new temporary self-signed certificate and CA-bundle
# NOTE: REGEN_DOMAIN_KEY = REGEN_ALL
#
REGEN_DOMAIN_CERT=0
if [[ -n "${CERT_DIR}/${CERT_NAME}.crt" ]]
then
	if [[ ${REGEN_DOMAIN_KEY} -eq 1 ]]; then
		echo "Domain key has been replaced, need to generate a new temporary certificate" >&2
		REGEN_DOMAIN_CERT=1
	else
		echo "Keeping existing domain certificate" >&2
		REGEN_DOMAIN_CERT=0
	fi
else
	#echo "No existing certificate found, generating a new temporary one" >&2
	REGEN_DOMAIN_CERT=1
fi

if [[ ${REGEN_DOMAIN_CERT} -eq 1 ]]
then
	#
	# Make the HTTP/-whatever daemon happy by generating an initial self-signed SSL cert
	#
	echo "Generating initial self-signed certificate (to make \$HTTP_SERVER happy)" >&2
	${OPENSSL} x509 \
		-req -sha256 \
		-in "${CERT_DIR}/${CERT_NAME}.csr" \
		-out "${CERT_DIR}/${CERT_NAME}.crt" \
		-signkey "${CERT_DIR}/${CERT_NAME}.key" \
		-extfile "${TMPFILE}" \
		${SIGNOPTS} \
		-days 10 \
		>/dev/null

	[[ $? -eq 0 ]] || {
		echo "Failed to self-sign initial certificate" >&2
		exit 1
	}

	${SETFACL} -m "user:${ACME_USER}:rw" "${CERT_DIR}/${CERT_NAME}.crt" || {
		echo "Failed to give ${ACME_USER} read/write permission on certificate" >&2
		exit 1
	}

	echo "Generating temporary ca chain file..." >&2
	cat "${CERT_DIR}/${CERT_NAME}.crt" >"${CERT_DIR}/${CERT_NAME}.ca-bundle" || {
		echo "Failed to create temporary ca chain file" >&2
		exit 1
	}

	${SETFACL} -m "user:${ACME_USER}:rw" "${CERT_DIR}/${CERT_NAME}.ca-bundle" || {
		echo "Failed to give ${ACME_USER} read/write permission on chain file" >&2
		exit 1
	}
fi


#
# Generate HPKP backup encrypted key and pin file
#
REGEN_BACKUP_KEY=0
if [[ -f "${CERT_DIR}/${BACKUP_NAME}.key" ]]
then
	if [[ ${REGEN_ALL} -eq 0 ]]; then
		echo "Keeping existing backup domain key" >&2
		REGEN_BACKUP_KEY=0
	else
		echo "Replacing backup domain key" >&2
		REGEN_BACKUP_KEY=1
	fi
else
	#echo "No backup domain key found, generating a new one" >&2
	REGEN_BACKUP_KEY=1
fi

if [[ ${REGEN_BACKUP_KEY} -eq 1 ]]
then
	BACKUP_PASS="$(${PWGEN} -Bcns 40)"
	[[ -n "${BACKUP_PASS}" ]] || {
		echo "Failed to generate backup domain key password" >&2
		exit 1
	}

	echo "Generating new backup domain key..." >&2
	case "${KEYTYPE:-RSA}" in
	rsa|RSA)
		${OPENSSL} genrsa -aes256 -passout stdin -out "${CERT_DIR}/${BACKUP_NAME}.key" ${KEYBITS} <<-EOF
			${BACKUP_PASS}
		EOF
		[[ $? -eq 0 ]] || {
			echo "Failed to generate RSA backup domain key" >&2
			exit 1
		}
		;;
	secp384r1|prime256v1)
		${OPENSSL} ecparam -genkey -name ${KEYTYPE} | ${OPENSSL} pkey -aes256 -passout fd:3 -out "${CERT_DIR}/${BACKUP_NAME}.key"  3<<-EOF
			${BACKUP_PASS}
		EOF
		[[ $? -eq 0 ]] || {
			echo "Failed to generate ECDSA backup domain key" >&2
			exit 1
		}
		;;
	*)
		echo "Invalid or unknown key type: '${KEYTYPE}', use one of: 'rsa','prime256v1','secp384r1'" >&2
		exit 1
		;;
	esac

	chmod 400 "${CERT_DIR}/${BACKUP_NAME}.key" || {
		echo "Failed to set backup domain key permissions" >&2
		exit 1
	}

	echo "Generating new sha256 pin file for backup domain key..." >&2
	( ${OPENSSL} pkey -in "${CERT_DIR}/${BACKUP_NAME}.key" -outform der -pubout -passin stdin |\
		${OPENSSL} dgst -sha256 -binary | base64 >"${CERT_DIR}/${BACKUP_NAME}.key.pin-sha256"; ) <<-EOF
		${BACKUP_PASS}
	EOF
	[[ $? -eq 0 ]] || {
		echo "Failed to generate backup domain key pin file" >&2
		exit 1
	}

	chmod 644 "${CERT_DIR}/${BACKUP_NAME}.key.pin-sha256" || {
		echo "Failed to set backup domain key pin file permissions" >&2
		exit 1
	}

	# Print password for backup key
	echo -e "$(cat -<<-EOF
		${CWHITE}==============================================================${CRESET}
		Password for '${CERT_NAME}' HPKP backup key:

		        ${CWHITE}${BACKUP_PASS}${CRESET}

		--------------------------------------------------------------
		      ${CORANGE}${CBLINK}!!! Please store this password in a safe place !!!${CRESET}
		${CWHITE}==============================================================${CRESET}
	EOF
	)"
fi


#
# Show configuration details including HSTS and HPKP headers
#

MASTER_PIN="$(cat "${CERT_DIR}/${CERT_NAME}.key.pin-sha256" 2>/dev/null)"
[[ -n "${MASTER_PIN}" ]] || {
	echo "Failed to read domain key pin" >&2
	exit 1
}

BACKUP_PIN="$(cat "${CERT_DIR}/${BACKUP_NAME}.key.pin-sha256" 2>/dev/null)"
[[ -n "${BACKUP_PIN}" ]] || {
	echo "Failed to read domain key pin" >&2
	exit 1
}


# Print configuration details
cat -<<-EOF

Configuration details for Apache-2.x:

    SSLEngine             on
    SSLCertificateKeyFile ${CERT_DIR}/${CERT_NAME}.key
    SSLCertificateFile    ${CERT_DIR}/${CERT_NAME}.crt
    SSLCACertificateFile  ${CERT_DIR}/${CERT_NAME}.ca-bundle

    Header always set "Strict-Transport-Security" "max-age=15552000"
    Header always set "Public-Key-Pins" "pin-sha256=\"${MASTER_PIN}\"; pin-sha256=\"${BACKUP_PIN}\"; max-age=86400; report-uri=\"http://report.axsentis.net/hpkp-report.php\""

EOF
